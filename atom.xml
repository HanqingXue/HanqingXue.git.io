<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LonelyWind</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-15T05:28:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hanqing Xue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>String to Integer (atoi)</title>
    <link href="http://yoursite.com/2017/04/14/leetcode-08/"/>
    <id>http://yoursite.com/2017/04/14/leetcode-08/</id>
    <published>2017-04-14T15:54:48.000Z</published>
    <updated>2017-04-15T05:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement atoi to convert a string to an integer.</p>
<h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<h2 id="Acceptance"><a href="#Acceptance" class="headerlink" title="Acceptance"></a>Acceptance</h2><p><strong>13.6%</strong></p>
<h2 id="Difficulty"><a href="#Difficulty" class="headerlink" title="Difficulty"></a>Difficulty</h2><p>Middle</p>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>The key issue of this problem is its input which is various. We need to take into account of some cases whcih can be categorized as blow</p>
<ol>
<li><p>Empty string. If the input is empty, we need return 0;</p>
</li>
<li><p>Sign. There are about three cases: ‘+’, ‘-‘, ‘digit’. ‘+’ and ‘digit’  mean that input is a positive number. And ‘-‘ means it is negative. when we receive a input, we should identify sign:  positive 1 and negative -1.</p>
</li>
<li><p>Value. It is easy to get acsill code of a digit. In python language, <strong>ord()</strong> is designed for this task. We can use diff of ‘digit’ - ‘0’ to get the value of string.Calculating step by step,  we can get real value of input. And as output, we need add sign for this value.</p>
</li>
<li><p>Overflow. we need to ensure our output is in range of ‘long’ type in C++. In python, ‘long’ type isn’t existing so we try to calculate this range. The interval of long type is -2147483648 ~ 2147483647. Let us ensure our output is in this interval.</p>
</li>
<li><p>Illegal input. If some illegal symbol in input, we return 0. However. For case ‘+-123’ , it is illegal as well. For some alpha mixed in string like ‘1234b11’, we should only consider ‘1234’</p>
</li>
</ol>
<h2 id="Code-python2-7"><a href="#Code-python2-7" class="headerlink" title="Code(python2.7)"></a>Code(python2.7)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding = utf-8</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, s=str)</span>:</span></div><div class="line">        s = s.strip()</div><div class="line">        op = <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> s == <span class="string">'0'</span> <span class="keyword">or</span> s == <span class="string">''</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="string">'+'</span> <span class="keyword">in</span> s) <span class="keyword">and</span> (<span class="string">'-'</span> <span class="keyword">in</span> s):</div><div class="line">             <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">or</span> s[<span class="number">0</span>] == <span class="string">'+'</span>:</div><div class="line">            op = <span class="number">1</span></div><div class="line">            s = s[<span class="number">1</span>: ]</div><div class="line">        <span class="keyword">elif</span> s[<span class="number">0</span>] == <span class="string">'-'</span>:</div><div class="line">            op = <span class="number">-1</span></div><div class="line">            s = s[<span class="number">1</span>: ]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">        value = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s)):</div><div class="line">            <span class="keyword">if</span> s[i].isdigit():</div><div class="line">                index = ord(s[i]) - ord(<span class="string">'0'</span>)</div><div class="line">                value = value*<span class="number">10</span> + index</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        resValue = op * value</div><div class="line"></div><div class="line">        maxint = <span class="number">2147483647</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> resValue &gt; maxint: <span class="keyword">return</span> maxint</div><div class="line">        <span class="keyword">if</span> resValue &lt; -maxint: <span class="keyword">return</span> -(maxint+<span class="number">1</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> resValue</div></pre></td></tr></table></figure>
<h2 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity:"></a>Time complexity:</h2><p><strong>O(n)</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;Implement atoi to convert a string
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Installing TensorFlow on macOS</title>
    <link href="http://yoursite.com/2017/03/23/Tensorflow/"/>
    <id>http://yoursite.com/2017/03/23/Tensorflow/</id>
    <published>2017-03-23T06:35:43.000Z</published>
    <updated>2017-03-24T11:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this tutorial, we are goning to introduce how to install TensorFlow on macOS. TensorFlow is an open source software library for machine learning across a range of tasks, and developed by Google to meet their needs for systems capable of building and training neural networks to detect and decipher patterns and correlations, analogous to the learning and reasoning which humans use.</p>
<h2 id="Step-0"><a href="#Step-0" class="headerlink" title="Step 0"></a>Step 0</h2><p>   We need to download Anaconda from websites.<br><img src="http://wx3.sinaimg.cn/mw690/c2dbc741ly1fdy5aj9jqij20p30judil.jpg" alt=""></p>
<p>This installation is simple. Default install path for mac is  ~/anaconda/. We need to ensure whether it works successfully on our machine. Some commands blow may help. Open a teminal and enter:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">which</span> python</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/mw690/c2dbc741ly1fdy5ajnxwuj20wa05cmyz.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python</div></pre></td></tr></table></figure>
<p><img src="http://wx3.sinaimg.cn/mw690/c2dbc741ly1fdy4pln7h9j20wa06iad2.jpg" alt=""></p>
<h2 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h2><p>We recommend you to create virtual environment. The advantages of this is that you will not destory the original enviorment when you make mistake in this environment.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ conda create --name tf python=3</div></pre></td></tr></table></figure></p>
<p><img src="http://wx4.sinaimg.cn/mw690/c2dbc741ly1fdy5agp4p3j20we038jsg.jpg" alt=""></p>
<h2 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h2><p>Now you can switch to the new environment by running the following (on Linux/Mac):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> activate tf</div></pre></td></tr></table></figure></p>
<p><img src="http://photo.weibo.com/3269183297/photos/detail/photo_id/4088899315073403/album_id/4088899134723924" alt=""></p>
<h2 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h2><p>Some dependencies are need. You can install them by using command “conda”. For  example, if you want to install package ‘pillow’, you would do as blow.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install pillow</div></pre></td></tr></table></figure></p>
<p><img src="http://wx1.sinaimg.cn/mw690/c2dbc741ly1fdy5ahmjggj20wg0m012b.jpg" alt=""><br>Despite ‘pillow’ require other packages, conda will install them automatically. You can install ’scipy’  ‘matplotlib’ ’numpy’ and other packages in same way.</p>
<h2 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h2><p>Now you can install TensorFlow. It is now possible to install the CPU-version of TensorFlow directly using pip. We also need the PrettyTensor add-on package so we install that as well:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install tensorflow prettytensor</div></pre></td></tr></table></figure></p>
<p><img src="http://wx3.sinaimg.cn/mw690/c2dbc741ly1fdy5ei2lh2j20vu0igqem.jpg" alt=""></p>
<h2 id="stpe5"><a href="#stpe5" class="headerlink" title="stpe5"></a>stpe5</h2><p>Now let us write ‘Hello world!’ as blow!</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line">hello = tf.constant(<span class="string">'Hello TensorFlow'</span>)</div><div class="line">sess  = tf.Session()</div><div class="line"><span class="keyword">print</span> (sess.run(hello))</div></pre></td></tr></table></figure>
<p><img src="http://wx1.sinaimg.cn/mw690/c2dbc741ly1fdy5ef99s4j20w20kah19.jpg" alt=""></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://en.wikipedia.org/wiki/TensorFlow" target="_blank" rel="external">https://en.wikipedia.org/wiki/TensorFlow</a><br><a href="https://www.continuum.io/downloads" target="_blank" rel="external">https://www.continuum.io/downloads</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this tutorial, we are goning to introduce how to install TensorFlow on macOS. TensorFlow is an open source software library for machin
    
    </summary>
    
    
      <category term="Deep learning" scheme="http://yoursite.com/tags/Deep-learning/"/>
    
  </entry>
  
</feed>
